介绍 C++ 和 C 的区别
  C++ 是 C 的超集，它引入了面向对象的特性，STL，异常处理等
  
什么是 namespace？为什么我们需要它？
用于区分不同库或模块中的相同名称的函数或类，以避免命名冲突

解释 public、private 和 protected 访问修饰符
public、private 和 protected 是类成员的访问修饰符，决定了成员的可见性和可访问性
public 成员可以从任何地方访问。
private 成员只能从类的成员函数和友元函数访问。
protected 成员与 private 相似，但可以被子类访问。

new 和 delete 与 malloc 和 free 有何不同
new 和 delete 在 C++ 中用于动态内存分配并调用构造和析构函数，而 malloc 和 free 是 C 语言中用于动态内存分配的，不调用构造和析构函数

解释继承、多态和封装
继承允许一个类继承另一个类的特性。多态是允许子类重载其父类的方法。封装是隐藏对象的内部表示并只公开操作它的接口。

什么是虚函数？为什么我们需要虚函数？
虚函数用于实现多态，使得基类指针可以调用派生类的方法

解释纯虚函数和抽象类
纯虚函数没有定义，派生类必须提供定义。包含纯虚函数的类是抽象类，不能实例化

什么是 C++ 的多重继承？它有什么问题？
  多重继承允许一个类继承多个类。它可能导致“菱形问题”。
  
介绍 vector、list、map 和 set 的区别。
vector 是动态数组；list 是双向链表；map 是基于键值对的平衡二叉树；set 是唯一元素的集合。

什么是迭代器？为什么我们需要它？
迭代器是一个允许遍历 STL 容器元素的对象

如何使用 algorithm 中的函数（如 sort、find 等）
algorithm 是一个库，其中包含许多常见的算法，例如排序和搜索

什么是智能指针？介绍 shared_ptr、unique_ptr 和 weak_ptr
智能指针自动管理对象的生命周期，如 shared_ptr（多个指针共享对象），unique_ptr（独有的对象指针）和 weak_ptr（不增加引用计数的指针）

么是内存泄漏？如何检测和预防？
如果程序分配了内存但在使用完之后忘记释放，那么这块内存就被称为“泄漏”。这会导致程序使用的内存不断增加，可能会耗尽可用的内存。
内存泄漏是程序未能释放已不再使用的内存。可以使用工具如 Valgrind 来检测

什么是堆和栈？它们之间的区别是什么？
堆用于动态内存分配，而栈用于静态内存分配。堆是适合于大量且生命周期不定的数据，而栈适用于生命周期短的数据

解释模板在 C++ 中的作用
  模板允许编写与类型无关的代码
  
什么是模板特化？
  模板特化允许为给定的模板参数定义特定的实现
  
什么是 lambda 表达式？如何使用它？
  lambda 表达式是一种匿名函数。它可以捕获其范围内的变量

解释 rvalue 和 lvalue
lvalue 是一个可以位于赋值运算符左边的表达式，而 rvalue 是只能位于赋值运算符右边或用于初始化变量的表达式。

解释 static 关键字在不同上下文中的含义
介绍 C++11 中的 std::thread。
std::thread 是 C++11 中用于创建和管理线程的类。
  
什么是互斥锁 (mutex)？为什么我们需要它
  互斥锁用于确保在同一时间只有一个线程可以执行特定的代码段
  
解释条件变量和 std::atomic。
条件变量用于线程之间的同步。std::atomic 提供了原子操作

docker
Docker 是一个开源的容器化技术，允许开发者和系统管理员在容器中构建、打包和运行应用。一个容器是一个轻量级、独立、可执行的软件包，其中包含了运行某个应用所需的一切：代码、运行时、系统工具、系统库和设置。
容器：容器是 Docker 的核心组件，它封装了应用及其所有依赖。容器的工作方式类似于轻量级的虚拟机，但与宿主系统共享相同的操作系统内核。
镜像：Docker 镜像是容器运行的模板。它是一个轻量级、独立的、可执行的软件包，其中包含了运行一个应用所需的一切：代码、运行时、系统工具、库和设置。


Kubernetes
是一个开源的容器编排平台，设计用于自动化、扩展和管理容器化应用的部署、扩缩和运行。
节点 (Node): 一个节点是一个运行 Kubernetes 的物理或虚拟机。节点可以是一个 VM 或物理机器，每个节点都由 Kubelet 管理，Kubelet 是管理 Pod 和与 Kubernetes 主节点通信的代理。
Pod: Pod 是 Kubernetes 中的最小部署单元，它包含一个或多个容器。这些容器在同一个 Pod 中共享网络命名空间、存储等。
部署 (Deployment): Deployment 是 Kubernetes 用来描述期望的应用状态的一个声明性方式。它定义了 Pod 的副本数量，更新策略等。
服务 (Service): 由于 Pod 有短暂的生命周期，Service 提供了一种固定的 IP 地址和 DNS 名称来代表一组功能相同的 Pod，从而客户端可以持续地与它们进行通信。
  
